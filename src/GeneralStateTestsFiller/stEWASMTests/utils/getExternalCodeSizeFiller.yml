getExternalCodeSize:
  env:
    currentCoinbase: 2adc25665018aa1fe0e6bc666dac8fc2697ff9ba
    currentDifficulty: '0x020000'
    currentGasLimit: '89128960'
    currentNumber: '1'
    currentTimestamp: '1000'
    previousHash: 5e20a0453cecd065ea59c37ac63e079ee08998b6045136a8ce6635c7912ec0b6
  pre:
    a94f5374fce5edbc8e2a8697c15331677e6ebf0b:
      balance: '100000000000'
      code: |
        (module
          (import "ethereum" "getExternalCodeSize" (func $getExternalCodeSize (param i32) (result i32)))
          (import "ethereum" "storageStore" (func $storageStore (param i32 i32)))
          (memory 1)
          (export "main" (func $main))
          (export "memory" (memory 0))
          (func $main
            ;; We can only store 64 bits (8 bytes) at a time, so break up the
            ;; 160 bit (20 byte)-long address into several 64 bit (8 byte) store calls
            (i64.store (i32.const 32) (i64.const 0x000000002adc2566))
            (i64.store (i32.const 40) (i64.const 0x5018aa1fe0e6bc66))
            (i64.store (i32.const 48) (i64.const 0x6dac8fc2697ff9ba))
            (i32.store (i32.const 64) (call $getExternalCodeSize (i32.const 32)))
            ;;(i32.store (i32.const 64) (i32.const 0x1234))
            (call $storageStore (i32.const 0) (i32.const 64))
          ))
      nonce: ''
      storage: {}
    2adc25665018aa1fe0e6bc666dac8fc2697ff9ba:
      balance: '100000000000'
      code: (module)
      nonce: ''
      storage: {}
  expect:
    - indexes:
        data: -1
        gas: -1
        value: -1
      network:
        - ALL
      result:
        a94f5374fce5edbc8e2a8697c15331677e6ebf0b:
          storage: {
            # the length of the code specified above in pre for the second address
            0: '0x08'
          }
  transaction:
    data: 
    - ''
    gasLimit:
    - '0x5000001'
    gasPrice: '0x02'
    nonce: '0x00'
    secretKey: 45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d8
    to: 'a94f5374fce5edbc8e2a8697c15331677e6ebf0b'
    value:
    - '0'
